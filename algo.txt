Торговий бот на основі індикаторів.
Система: Windows 10/11 64bit
Мова: Python 3.13 64bit
Платформа: bybit (api v5 unified acc)

——0. Файлова структура:
/indi_bot
    /config
    - .env (API ключі bybit live/demo trading (api v5. testnet=False завжди!!!) можливістю переключення між режимами. telegram)
    - settings.py (файл налаштувань: indicators.py, strategy.py, та загальні налаштування, цим файлом ми контрлюємо бота (`# -*- coding: utf-8 -*-`) apikey, trade_pairs=[‘STRK/USDT’, ‘ADA/USDT, ‘PEPE/USDT’], load_candles_amount=1000, timeframe=‘3m’, min_order_amount=10(позиція угоди в відсоткахдо балансу до прикладу якщо балансі 100 usdt то використовуємо 10% та leverage(10) угода вартістю100$ ), max_orders_qty=3, leverage=10), також налаштування індикаторів з indicators.py та ключових параметрів стратегії strategy.py .
 - main.py (основний скрипт запуску(`# -*- coding: utf-8 -*-`), NTP синхронізацію
перевірку часового зсуву з сервером Bybit. yyyy-mm-dd-hh-mm-ss, Перевірка на аномальні значення свічок
.
 - requirements.txt (список модулів з сумісністю версіями для python 3.13)
     /data (база даних асинхроний sqlite)
      - candles.db (асинхронна база даних sqlite одна таблиця для кожної trade_pairs, timestamp у форматі (yyyy-mm-dd-hh-mm-ss), symbol, timeframe, OCHLV + для кожного індикатора своя колонка,сумісність зі всіма типами даних), завантаження свічок кожні timeframe хв (до прикладу якшо ботзапустився в 12:23 а TIMEFRAME=5 то новий запит на оримання свічки мусть бути в 12:25 а наступний в 12:30)
     /cashe (тут місце для всіх кешованих даних, temp)
     /logs(усі логи мусять бути адаптовані до кирилиці (`# -*- coding: utf-8 -*-`))
      - trades.log
      - erorrs.log
      - logs.log
     /src
      - api_manager (модуль взаємодії з bybit api v5 unified acc, підтримка live/demo trading unified acc (не testnet- завжди False!!!), в demo режимі (я маю окремий API) реалізувати тільки базові функції для перевірки основного функціоналу!(`# -*- coding: utf-8 -*-`) (pybit==5.9 +) «asyncio» для паралельного оновлення даних (завантаження по 1000 свічок).  
        **retry-логіка** для 429 помилок.  обмеження по запитах api до 3-5 в секунду!
      - indicators.py (індикатори (ta-lib) та їх на лаштування в settings.py(`# -*- coding: utf-8 -*-`), детальний опис у пункті ——1. Індикатори

      - db_manager (модуль для бази даних sqlite(`# -*- coding: utf-8 -*-`) одна таблиця для всіх пар з колонками: Додати індекси для полів `timestamp` і `symbol`, timeframe ,OCHLV + окрема колонка для кожного індикатора з модуля indicators.py)
        Використовувати `REAL`/`INTEGER` у SQLite.  

      - preprocessor.py (модуль обробки даних (`# -*- coding: utf-8 -*-`)який бере історичні дані та розраховує індикатори та оновлює таблицю candles.db у папці /data кожні timeframe хвилин, нормалізує дані та **Обробка NaN**: Використовувати інтерполяцію), адаптувати до усіх типів даних. Валідація цілісності індикаторів перед торгівлею

      - strategy.py (стратегія входу виходу з позиції (`# -*- coding: utf-8 -*-`)налаштування ключових параметрів в settings.py, детальний опис стратегії у пункті ——2. Стратегія.

      - telegram.py - файл налаштування телеграм бота,який показує статус бота, баланс usdt, P&L, відкриття/закриття позицій, критичні помилки api ключ занходиться в файлі .env

——1. Список індикаторів:

Індикатори (використовуй ta-lib, налаштування індикаторів в settings.py)  
         
    - тут мають бути усі індикатори  які використоауються у ——2. Стратегія


——2. Стратегія:
 Алгоритм стратегії  strategy.py - приклад страьегії поданий нижче у pinescript, (індикатори які використовуємо розміщуємов indicators.py , основні налаштування добавити у settings.py (STRATEGY = {}), розмір позиції ‘min_order_amount’ в usdt (приклад: використовувати 10usdt балансу з 10м leverage = 100usdt позиція))

  - приклад страьегії:
  //@version=6
strategy("5M LIGHTNING: Volume Surge Record Breaker", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=10000, currency=currency.USD, calc_on_every_tick=true)

// ===== Custom ADX Calculation Function =====
f_adx(_length) =>
    upMove = high - high[1]
    downMove = low[1] - low
    plusDM = (upMove > downMove and upMove > 0) ? upMove : 0.0
    minusDM = (downMove > upMove and downMove > 0) ? downMove : 0.0
    tr1 = high - low
    tr2 = math.abs(high - close[1])
    tr3 = math.abs(low - close[1])
    tr = math.max(math.max(tr1, tr2), tr3)
    atr = ta.rma(tr, _length)
    plusDI = 100 * ta.rma(plusDM, _length) / atr
    minusDI = 100 * ta.rma(minusDM, _length) / atr
    dx = 100 * math.abs(plusDI - minusDI) / (plusDI + minusDI)
    adx = ta.rma(dx, _length)
    adx

// ===== Input Parameters =====
rsiLength = input.int(14, "RSI Length", minval=1)
rsiOverbought = input.int(70, "RSI Overbought Level", minval=50, maxval=100)
rsiOversold = input.int(30, "RSI Oversold Level", minval=0, maxval=50)

fastMA = input.int(8, "Fast EMA Length", minval=1)
slowMA = input.int(21, "Slow EMA Length", minval=1)

macdFast = input.int(12, "MACD Fast Length", minval=1)
macdSlow = input.int(26, "MACD Slow Length", minval=1)
macdSignal = input.int(9, "MACD Signal Length", minval=1)

volumeLookback = input.int(5, "Volume SMA Period", minval=1)
useATRStop = input.bool(true, "Use ATR-based TP/SL")
atrLength = input.int(14, "ATR Length", minval=1)
adxPeriod = input.int(14, "ADX Length", minval=1)
adxThreshold = input.int(20, "ADX Minimum Threshold", minval=10)
minVolumeMult = input.float(1.1, "Volume SMA Multiplier", minval=1.0, maxval=2.0, step=0.1)

// ===== TIME FILTER =====
useTimeFilter = input.bool(true, "Use Time Filter", group="Time Filter")
avoidEarlyHours = input.bool(true, "Avoid Early Session (0-2 UTC)", group="Time Filter")
avoidLateHours = input.bool(true, "Avoid Late Session (21-23 UTC)", group="Time Filter")
avoidLunchTime = input.bool(true, "Avoid Lunch Time (12-14 UTC)", group="Time Filter")

earlySessionStart = input.int(0, "Early Session Start", minval=0, maxval=23, group="Time Filter")
earlySessionEnd = input.int(2, "Early Session End", minval=1, maxval=6, group="Time Filter")
lateSessionStart = input.int(21, "Late Session Start", minval=18, maxval=23, group="Time Filter")
lateSessionEnd = input.int(23, "Late Session End", minval=19, maxval=23, group="Time Filter")
lunchTimeStart = input.int(12, "Lunch Start", minval=11, maxval=13, group="Time Filter")
lunchTimeEnd = input.int(14, "Lunch End", minval=13, maxval=15, group="Time Filter")

// ===== ADAPTIVE RISK =====
useAdaptiveRisk = input.bool(true, "Adaptive Risk", group="Risk Management")
riskReductionPercent = input.float(25.0, "Risk Reduction %", minval=10.0, maxval=50.0, step=5.0, group="Risk Management")

// ===== MARKET REGIME =====
useMarketRegime = input.bool(true, "Market Regime", group="Market Analysis")
regimePeriod = input.int(20, "Regime Period", minval=10, maxval=50, group="Market Analysis")
trendStrength = input.float(1.5, "Trend Strength", minval=1.0, maxval=3.0, step=0.1, group="Market Analysis")
volatilityThreshold = input.float(0.02, "Volatility Threshold", minval=0.01, maxval=0.05, step=0.01, group="Market Analysis")
momentumPeriod = input.int(10, "Momentum Period", minval=5, maxval=20, group="Market Analysis")

// ===== ADAPTIVE PARAMETERS =====
useAdaptiveParams = input.bool(true, "Adaptive Parameters", group="Adaptive System")

trendingMinConfLong = input.int(2, "Trending: Min Conf Long", minval=1, maxval=4, group="Adaptive System")
trendingMinConfShort = input.int(2, "Trending: Min Conf Short", minval=1, maxval=4, group="Adaptive System")
trendingADXThresh = input.int(25, "Trending: ADX Thresh", minval=15, maxval=40, group="Adaptive System")
trendingTPMult = input.float(2.8, "Trending: TP Mult", minval=2.0, maxval=4.0, step=0.1, group="Adaptive System")
trendingSLMult = input.float(1.0, "Trending: SL Mult", minval=0.5, maxval=2.0, step=0.1, group="Adaptive System")

rangingMinConfLong = input.int(3, "Ranging: Min Conf Long", minval=2, maxval=4, group="Adaptive System")
rangingMinConfShort = input.int(3, "Ranging: Min Conf Short", minval=2, maxval=4, group="Adaptive System")
rangingADXThresh = input.int(15, "Ranging: ADX Thresh", minval=10, maxval=25, group="Adaptive System")
rangingTPMult = input.float(1.5, "Ranging: TP Mult", minval=1.0, maxval=2.5, step=0.1, group="Adaptive System")
rangingSLMult = input.float(0.8, "Ranging: SL Mult", minval=0.5, maxval=1.5, step=0.1, group="Adaptive System")

mixedMinConfLong = input.int(2, "Mixed: Min Conf Long", minval=1, maxval=4, group="Adaptive System")
mixedMinConfShort = input.int(2, "Mixed: Min Conf Short", minval=1, maxval=4, group="Adaptive System")
mixedADXThresh = input.int(20, "Mixed: ADX Thresh", minval=15, maxval=30, group="Adaptive System")
mixedTPMult = input.float(2.2, "Mixed: TP Mult", minval=1.5, maxval=3.0, step=0.1, group="Adaptive System")
mixedSLMult = input.float(1.0, "Mixed: SL Mult", minval=0.5, maxval=1.5, step=0.1, group="Adaptive System")

// ===== LIGHTNING VOLUME SURGE SYSTEM =====
useLightningVolume = input.bool(true, "Lightning Volume Surge", group="LIGHTNING SYSTEM")

volumeSurgeMult = input.float(4.0, "Volume Surge Multiplier", minval=3.0, maxval=6.0, step=0.5, group="LIGHTNING SYSTEM")
consecutiveVolBars = input.int(2, "Consecutive High Volume Bars", minval=1, maxval=4, group="LIGHTNING SYSTEM")
volSurgeTPBoost = input.float(15.0, "Volume Surge TP Boost %", minval=10.0, maxval=25.0, step=2.5, group="LIGHTNING SYSTEM")

useVolumeDivergence = input.bool(true, "Volume Divergence Detection", group="LIGHTNING SYSTEM")
volDivergencePeriod = input.int(5, "Volume Divergence Period", minval=3, maxval=8, group="LIGHTNING SYSTEM")

superVolumeMult = input.float(8.0, "Super Volume Multiplier", minval=6.0, maxval=12.0, step=1.0, group="LIGHTNING SYSTEM")
superVolumeTPBoost = input.float(35.0, "Super Volume TP Boost %", minval=25.0, maxval=50.0, step=5.0, group="LIGHTNING SYSTEM")

useVolumeExtension = input.bool(true, "Volume-Based TP Extension", group="LIGHTNING SYSTEM")
volumeExtensionMult = input.float(1.3, "Extension Multiplier", minval=1.1, maxval=2.0, step=0.1, group="LIGHTNING SYSTEM")

// TRIPLE PARTIAL TP SYSTEM
useTriplePartialTP = input.bool(true, "Use Triple Partial TP", group="RECORD BASE SYSTEM")

firstPartialPercent = input.float(15.0, "1st Partial: % to Close", minval=10.0, maxval=25.0, step=2.5, group="RECORD BASE SYSTEM")
firstPartialMultiplier = input.float(0.8, "1st Partial: ATR Multiplier", minval=0.6, maxval=1.1, step=0.1, group="RECORD BASE SYSTEM")

secondPartialPercent = input.float(25.0, "2nd Partial: % to Close", minval=20.0, maxval=35.0, step=2.5, group="RECORD BASE SYSTEM")
secondPartialMultiplier = input.float(1.3, "2nd Partial: ATR Multiplier", minval=1.0, maxval=1.6, step=0.1, group="RECORD BASE SYSTEM")

thirdPartialPercent = input.float(30.0, "3rd Partial: % to Close", minval=25.0, maxval=40.0, step=2.5, group="RECORD BASE SYSTEM")
thirdPartialMultiplier = input.float(1.8, "3rd Partial: ATR Multiplier", minval=1.5, maxval=2.2, step=0.1, group="RECORD BASE SYSTEM")

useBreakeven = input.bool(true, "Move SL to Breakeven after 1st Partial", group="RECORD BASE SYSTEM")
breakevenBuffer = input.float(0.05, "Breakeven Buffer (ATR)", minval=0.0, maxval=0.2, step=0.05, group="RECORD BASE SYSTEM")

useTrailingStop = input.bool(true, "Trailing Stop")
trailATRMult = input.float(0.7, "Trail ATR Mult", minval=0.1, step=0.1)

// ===== Calculate Indicators =====
rsi = ta.rsi(close, rsiLength)
isRSIRising1 = ta.rising(rsi, 1)
isRSIRising2 = ta.rising(rsi, 2)
isRSIFalling1 = ta.falling(rsi, 1)
isRSIFalling2 = ta.falling(rsi, 2)

[macdLine, signalLine, histLine] = ta.macd(close, macdFast, macdSlow, macdSignal)
isHistRising = ta.rising(histLine, 1)
isHistFalling = ta.falling(histLine, 1)

emaFast = ta.ema(close, fastMA)
emaSlow = ta.ema(close, slowMA)

volumeSMA = ta.sma(volume, volumeLookback)
volumeFilter = volume > volumeSMA * minVolumeMult

trendEMA = ta.ema(close, slowMA)
bullishTrend = close > trendEMA
bearishTrend = close < trendEMA

adxValue = f_adx(adxPeriod)
atrValue = ta.atr(atrLength)

// ===== LIGHTNING VOLUME SURGE DETECTION =====
volumeSurge = volume > volumeSMA * volumeSurgeMult
superVolumeSurge = volume > volumeSMA * superVolumeMult

var int consecutiveVolCount = 0
if volume > volumeSMA * 2.0
    consecutiveVolCount := consecutiveVolCount + 1
else
    consecutiveVolCount := 0

sustainedVolume = consecutiveVolCount >= consecutiveVolBars

priceChange5 = ta.change(close, volDivergencePeriod)
volumeChange5 = ta.change(volume, volDivergencePeriod)
volumeAvg5 = ta.sma(volume, volDivergencePeriod)

bullishVolDivergence = priceChange5 < 0 and volumeChange5 > 0 and volume > volumeAvg5 * 1.5
bearishVolDivergence = priceChange5 > 0 and volumeChange5 < 0 and volume < volumeAvg5 * 0.7

volumeTrend = ta.ema(volume, 10) / ta.ema(volume, 20)
strongVolumeTrend = volumeTrend > 1.2
weakVolumeTrend = volumeTrend < 0.8

// ===== TIME FILTER =====
currentHour = hour(time, "UTC")
isEarlySession = currentHour >= earlySessionStart and currentHour <= earlySessionEnd
isLateSession = currentHour >= lateSessionStart and currentHour <= lateSessionEnd
isLunchTime = currentHour >= lunchTimeStart and currentHour <= lunchTimeEnd

timeFilterOK = true
if useTimeFilter
    if avoidEarlyHours and isEarlySession
        timeFilterOK := false
    if avoidLateHours and isLateSession
        timeFilterOK := false
    if avoidLunchTime and isLunchTime
        timeFilterOK := false

// ===== RISK MANAGEMENT =====
var int consecutiveLosses = 0
var float currentRiskMultiplier = 1.0

if strategy.closedtrades > 0 and strategy.closedtrades != strategy.closedtrades[1]
    lastProfit = strategy.closedtrades.profit(strategy.closedtrades - 1)
    if lastProfit < 0
        consecutiveLosses := consecutiveLosses + 1
    else
        consecutiveLosses := 0

if useAdaptiveRisk
    reductionAmount = consecutiveLosses * (riskReductionPercent / 100)
    currentRiskMultiplier := math.max(1.0 - reductionAmount, 0.25)
else
    currentRiskMultiplier := 1.0

// ===== MARKET REGIME =====
priceRange = ta.highest(high, regimePeriod) - ta.lowest(low, regimePeriod)
atrRange = ta.atr(atrLength) * regimePeriod
volatilityRegime = ta.stdev(close, regimePeriod) / ta.sma(close, regimePeriod)
isHighVolatility = volatilityRegime > volatilityThreshold
momentum = ta.change(close, momentumPeriod)
avgMomentum = ta.sma(math.abs(momentum), regimePeriod)
isStrongMomentum = math.abs(momentum) > avgMomentum
emaSeparation = math.abs(emaFast - emaSlow) / close
avgSeparation = ta.sma(emaSeparation, regimePeriod)
isEmaExpanding = emaSeparation > avgSeparation

trendingScore = 0
trendingScore += (priceRange > (atrRange * trendStrength)) ? 1 : 0
trendingScore += isHighVolatility ? 1 : 0
trendingScore += isStrongMomentum ? 1 : 0
trendingScore += isEmaExpanding ? 1 : 0

isTrendingMarket = trendingScore >= 3
isRangingMarket = trendingScore <= 1

// ===== ADAPTIVE PARAMETERS =====
var int currentMinConfLong = 2
var int currentMinConfShort = 2
var int currentADXThresh = 20
var float currentTPMult = 2.2
var float currentSLMult = 1.0

if useAdaptiveParams
    if isTrendingMarket
        currentMinConfLong := trendingMinConfLong
        currentMinConfShort := trendingMinConfShort
        currentADXThresh := trendingADXThresh
        currentTPMult := trendingTPMult
        currentSLMult := trendingSLMult
    else if isRangingMarket
        currentMinConfLong := rangingMinConfLong
        currentMinConfShort := rangingMinConfShort
        currentADXThresh := rangingADXThresh
        currentTPMult := rangingTPMult
        currentSLMult := rangingSLMult
    else
        currentMinConfLong := mixedMinConfLong
        currentMinConfShort := mixedMinConfShort
        currentADXThresh := mixedADXThresh
        currentTPMult := mixedTPMult
        currentSLMult := mixedSLMult

// ===== DYNAMIC TP CALCULATION WITH VOLUME SURGE =====
var float dynamicTPMult = 2.2
var bool volumeSurgeActive = false
var bool superVolumeSurgeActive = false

if useLightningVolume
    if superVolumeSurge
        superVolumeSurgeActive := true
        dynamicTPMult := currentTPMult * (1 + superVolumeTPBoost / 100)
        volumeSurgeActive := true
    else if volumeSurge or sustainedVolume
        volumeSurgeActive := true
        dynamicTPMult := currentTPMult * (1 + volSurgeTPBoost / 100)
        superVolumeSurgeActive := false
    else
        dynamicTPMult := currentTPMult
        volumeSurgeActive := false
        superVolumeSurgeActive := false

var float finalTPExtension = 1.0
if useVolumeExtension and sustainedVolume and strongVolumeTrend
    finalTPExtension := volumeExtensionMult
else
    finalTPExtension := 1.0

// ===== SIGNALS =====
emaBullish = ta.crossover(emaFast, emaSlow)
emaBearish = ta.crossunder(emaFast, emaSlow)

macdBullish = ta.crossover(macdLine, signalLine) or (macdLine > signalLine and isHistRising)
macdBearish = ta.crossunder(macdLine, signalLine) or (macdLine < signalLine and isHistFalling)

rsiBullish = (rsi < rsiOversold and isRSIRising1) or (rsi < 45 and isRSIRising2)
rsiBearish = (rsi > rsiOverbought and isRSIFalling1) or (rsi > 65 and isRSIFalling2)

var longConfirmations = 0
longConfirmations := 0
longConfirmations += emaBullish ? 1 : 0
longConfirmations += macdBullish ? 1 : 0
longConfirmations += rsiBullish ? 1 : 0
longConfirmations += volumeFilter ? 1 : 0

var shortConfirmations = 0
shortConfirmations := 0
shortConfirmations += emaBearish ? 1 : 0
shortConfirmations += macdBearish ? 1 : 0
shortConfirmations += rsiBearish ? 1 : 0
shortConfirmations += volumeFilter ? 1 : 0

if useLightningVolume
    if volumeSurge or superVolumeSurge
        if bullishTrend
            longConfirmations += 1
        if bearishTrend
            shortConfirmations += 1

baseBuySignal = (longConfirmations >= currentMinConfLong) and bullishTrend and (adxValue > currentADXThresh)
baseSellSignal = (shortConfirmations >= currentMinConfShort) and bearishTrend and (adxValue > currentADXThresh)

buySignal = baseBuySignal and timeFilterOK
sellSignal = baseSellSignal and timeFilterOK

// ===== LIGHTNING TRIPLE PARTIAL TP MANAGEMENT =====
var float entryPrice = na
var bool firstPartialTPHit = false
var bool secondPartialTPHit = false
var bool thirdPartialTPHit = false

var float firstPartialTPLong = na
var float secondPartialTPLong = na
var float thirdPartialTPLong = na
var float finalTPLong = na
var float stopLossLong = na

var float firstPartialTPShort = na
var float secondPartialTPShort = na
var float thirdPartialTPShort = na
var float finalTPShort = na
var float stopLossShort = na

if buySignal and strategy.position_size == 0
    entryPrice := close
    firstPartialTPHit := false
    secondPartialTPHit := false
    thirdPartialTPHit := false
    
    stopLossLong := entryPrice - currentSLMult * atrValue
    firstPartialTPLong := entryPrice + firstPartialMultiplier * atrValue
    secondPartialTPLong := entryPrice + secondPartialMultiplier * atrValue
    thirdPartialTPLong := entryPrice + thirdPartialMultiplier * atrValue
    finalTPLong := entryPrice + dynamicTPMult * atrValue * finalTPExtension
    
    strategy.entry("Long", strategy.long)

if sellSignal and strategy.position_size == 0
    entryPrice := close
    firstPartialTPHit := false
    secondPartialTPHit := false
    thirdPartialTPHit := false
    
    stopLossShort := entryPrice + currentSLMult * atrValue
    firstPartialTPShort := entryPrice - firstPartialMultiplier * atrValue
    secondPartialTPShort := entryPrice - secondPartialMultiplier * atrValue
    thirdPartialTPShort := entryPrice - thirdPartialMultiplier * atrValue
    finalTPShort := entryPrice - dynamicTPMult * atrValue * finalTPExtension
    
    strategy.entry("Short", strategy.short)

if strategy.position_size > 0 and useTriplePartialTP
    if not firstPartialTPHit and close >= firstPartialTPLong
        strategy.close("Long", qty_percent=firstPartialPercent, comment="1st Partial TP")
        firstPartialTPHit := true
        
        if useBreakeven
            stopLossLong := entryPrice + breakevenBuffer * atrValue
    
    if firstPartialTPHit and not secondPartialTPHit and close >= secondPartialTPLong
        strategy.close("Long", qty_percent=secondPartialPercent, comment="2nd Partial TP")
        secondPartialTPHit := true
    
    if secondPartialTPHit and not thirdPartialTPHit and close >= thirdPartialTPLong
        strategy.close("Long", qty_percent=thirdPartialPercent, comment="3rd Partial TP")
        thirdPartialTPHit := true

if strategy.position_size < 0 and useTriplePartialTP
    if not firstPartialTPHit and close <= firstPartialTPShort
        strategy.close("Short", qty_percent=firstPartialPercent, comment="1st Partial TP")
        firstPartialTPHit := true
        
        if useBreakeven
            stopLossShort := entryPrice - breakevenBuffer * atrValue
    
    if firstPartialTPHit and not secondPartialTPHit and close <= secondPartialTPShort
        strategy.close("Short", qty_percent=secondPartialPercent, comment="2nd Partial TP")
        secondPartialTPHit := true
    
    if secondPartialTPHit and not thirdPartialTPHit and close <= thirdPartialTPShort
        strategy.close("Short", qty_percent=thirdPartialPercent, comment="3rd Partial TP")
        thirdPartialTPHit := true

if useVolumeDivergence and strategy.position_size != 0
    if strategy.position_size > 0 and bearishVolDivergence
        strategy.close("Long", qty_percent=50, comment="Vol Divergence")
    if strategy.position_size < 0 and bullishVolDivergence
        strategy.close("Short", qty_percent=50, comment="Vol Divergence")

if strategy.position_size > 0
    strategy.exit("Final Long", from_entry="Long", limit=finalTPLong, stop=stopLossLong)
if strategy.position_size < 0
    strategy.exit("Final Short", from_entry="Short", limit=finalTPShort, stop=stopLossShort)

if useTrailingStop and strategy.position_size != 0 and (firstPartialTPHit or not useTriplePartialTP)
    trailValue = atrValue * trailATRMult
    longTrailLevel = high - trailValue
    shortTrailLevel = low + trailValue
    if strategy.position_size > 0
        strategy.exit("TrailStop Long", from_entry="Long", stop=longTrailLevel)
    else
        strategy.exit("TrailStop Short", from_entry="Short", stop=shortTrailLevel)

// ===== PLOTTING =====
tp_level = strategy.position_size != 0 ? (strategy.position_size > 0 ? finalTPLong : finalTPShort) : na
sl_level = strategy.position_size != 0 ? (strategy.position_size > 0 ? stopLossLong : stopLossShort) : na
first_tp_level = strategy.position_size != 0 ? (strategy.position_size > 0 ? firstPartialTPLong : firstPartialTPShort) : na
second_tp_level = strategy.position_size != 0 ? (strategy.position_size > 0 ? secondPartialTPLong : secondPartialTPShort) : na
third_tp_level = strategy.position_size != 0 ? (strategy.position_size > 0 ? thirdPartialTPLong : thirdPartialTPShort) : na

plot(emaFast, title="Fast EMA", color=color.new(color.blue, 0))
plot(emaSlow, title="Slow EMA", color=color.new(color.orange, 0))
plot(trendEMA, title="Trend EMA", color=color.new(color.purple, 70), linewidth=2)

regimeColor = isTrendingMarket ? color.new(color.green, 95) : isRangingMarket ? color.new(color.red, 95) : color.new(color.yellow, 95)
bgcolor(useMarketRegime ? regimeColor : na)

timeFilterColor = not timeFilterOK ? color.new(color.gray, 90) : na
bgcolor(useTimeFilter ? timeFilterColor : na)

volumeSurgeBgColor = superVolumeSurge ? color.new(color.yellow, 85) : volumeSurge ? color.new(color.lime, 92) : sustainedVolume ? color.new(color.aqua, 95) : na
bgcolor(useLightningVolume ? volumeSurgeBgColor : na)

plotshape(buySignal, style=shape.triangleup, location=location.belowbar, color=color.new(color.green, 0), size=size.small, title="Buy Signal")
plotshape(sellSignal, style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.small, title="Sell Signal")

plotshape(superVolumeSurge, style=shape.diamond, location=location.belowbar, color=color.new(color.yellow, 0), size=size.large, title="Super Volume!")
plotshape(volumeSurge, style=shape.circle, location=location.belowbar, color=color.new(color.lime, 0), size=size.normal, title="Volume Surge!")

plotshape(bullishVolDivergence, style=shape.triangleup, location=location.belowbar, color=color.new(color.blue, 0), size=size.tiny, title="Bullish Vol Div")
plotshape(bearishVolDivergence, style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.tiny, title="Bearish Vol Div")

finalTPColor = superVolumeSurgeActive ? color.new(color.yellow, 20) : volumeSurgeActive ? color.new(color.lime, 30) : color.new(color.green, 30)

plot(first_tp_level, title="1st Partial TP (15%)", color=color.new(color.yellow, 40), style=plot.style_circles, linewidth=1)
plot(second_tp_level, title="2nd Partial TP (25%)", color=color.new(color.orange, 40), style=plot.style_circles, linewidth=1)
plot(third_tp_level, title="3rd Partial TP (30%)", color=color.new(color.lime, 40), style=plot.style_circles, linewidth=2)
plot(tp_level, title="LIGHTNING Final TP", color=finalTPColor, style=plot.style_circles, linewidth=4)
plot(sl_level, title="Stop Loss", color=color.new(color.red, 40), style=plot.style_circles, linewidth=2)

// ===== LIGHTNING VOLUME INFO PANEL =====
var table infoTable = table.new(position.top_right, 2, 12, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(infoTable, 0, 0, "LIGHTNING VOLUME", text_color=color.black)
    table.cell(infoTable, 1, 0, "TARGET: PF 4.0+", text_color=color.green)
    
    table.cell(infoTable, 0, 1, "Volume vs Average", text_color=color.black)
    volumeRatio = volume / volumeSMA
    volumeRatioColor = volumeRatio >= 4.0 ? color.yellow : volumeRatio >= 2.0 ? color.lime : color.gray
    table.cell(infoTable, 1, 1, str.tostring(volumeRatio, "#.#") + "x", text_color=volumeRatioColor)
    
    table.cell(infoTable, 0, 2, "Volume Surge Status", text_color=color.black)
    surgeStatusText = superVolumeSurge ? "SUPER!" : volumeSurge ? "SURGE!" : sustainedVolume ? "HIGH" : "Normal"
    surgeStatusColor = superVolumeSurge ? color.yellow : volumeSurge ? color.lime : sustainedVolume ? color.aqua : color.gray
    table.cell(infoTable, 1, 2, surgeStatusText, text_color=surgeStatusColor)
    
    table.cell(infoTable, 0, 3, "TP Boost Active", text_color=color.black)
    boostText = superVolumeSurgeActive ? str.tostring(superVolumeTPBoost, "#") + "%" : volumeSurgeActive ? str.tostring(volSurgeTPBoost, "#") + "%" : "0%"
    boostColor = superVolumeSurgeActive ? color.yellow : volumeSurgeActive ? color.lime : color.gray
    table.cell(infoTable, 1, 3, boostText, text_color=boostColor)
    
    table.cell(infoTable, 0, 4, "Dynamic Final TP", text_color=color.black)
    finalTPText = str.tostring(dynamicTPMult, "#.##") + "x ATR"
    finalTPColorText = dynamicTPMult > currentTPMult ? color.green : color.blue
    table.cell(infoTable, 1, 4, finalTPText, text_color=finalTPColorText)
    
    table.cell(infoTable, 0, 5, "Volume Extension", text_color=color.black)
    extensionText = finalTPExtension > 1.0 ? str.tostring(finalTPExtension, "#.#") + "x" : "1.0x"
    extensionColor = finalTPExtension > 1.0 ? color.red : color.gray
    table.cell(infoTable, 1, 5, extensionText, text_color=extensionColor)
    
    table.cell(infoTable, 0, 6, "Market Regime", text_color=color.black)
    regimeText = isTrendingMarket ? "TRENDING" : isRangingMarket ? "RANGING" : "MIXED"
    regimeTextColor = isTrendingMarket ? color.green : isRangingMarket ? color.red : color.orange
    table.cell(infoTable, 1, 6, regimeText, text_color=regimeTextColor)
    
    table.cell(infoTable, 0, 7, "Partials Progress", text_color=color.black)
    progressText = (firstPartialTPHit ? "1 YES" : "1 NO") + " " + (secondPartialTPHit ? "2 YES" : "2 NO") + " " + (thirdPartialTPHit ? "3 YES" : "3 NO")
    table.cell(infoTable, 1, 7, progressText, text_color=color.green)
    
    table.cell(infoTable, 0, 8, "Secured Profit %", text_color=color.black)
    securedPercent = 0.0
    if firstPartialTPHit
        securedPercent += firstPartialPercent
    if secondPartialTPHit
        securedPercent += secondPartialPercent
    if thirdPartialTPHit
        securedPercent += thirdPartialPercent
    table.cell(infoTable, 1, 8, str.tostring(securedPercent, "#.#") + "%", text_color=color.green)
    
    table.cell(infoTable, 0, 9, "Time Filter", text_color=color.black)
    timeStatusText = timeFilterOK ? "PASS" : "FILTERED"
    timeStatusColor = timeFilterOK ? color.green : color.red
    table.cell(infoTable, 1, 9, timeStatusText, text_color=timeStatusColor)
    
    table.cell(infoTable, 0, 10, "Current R:R", text_color=color.black)
    currentRR = dynamicTPMult / currentSLMult
    rrColor = currentRR >= 4.0 ? color.yellow : currentRR >= 3.0 ? color.green : color.orange
    table.cell(infoTable, 1, 10, str.tostring(currentRR, "#.#") + ":1", text_color=rrColor)
    
    table.cell(infoTable, 0, 11, "Hour (UTC)", text_color=color.black)
    table.cell(infoTable, 1, 11, str.tostring(currentHour) + ":XX", text_color=color.blue)

***увага*** обовязково врахувати при створені файлів!!! 
- стратегія протестована на tradingview і має 70+ % вінрейту на різниї парах  таймфреймах та часових відрізках тож я хотів би відтворити її детальнов цьому боті!!!
- при створені файлів основний нахил робити на отримання та обробку реальних даних (нівякому разі не штучні), усі індикатори мають бути розраховані чітко та точно незалежноу якому режимі ми працюємо
- не створюватии не потрібних функцій,надмірного логування (не стосується помилок)
- backtest не потрібен так як ми тестуватимемо на DEMO trading режимі
- усю візуалізацію ми проводимо в telegram (але без надмірного інформування, тільки корисна інвормація)
-усі файли та бібліотеки мають бути сумісними з windows 10 64bit, Python 3.13 64bit!